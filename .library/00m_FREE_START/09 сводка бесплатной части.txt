===== Тег и атрибут

HTML — язык разметки интернет-страницы. Тег — специальная конструкция, чтобы организовать контент. Именно с помощью тегов можно отличить текст в ссылке от текста в заголовке.

Большинство тегов парные: есть открывающий и закрывающий, а весь контент находится между ними:

<h1>Привет, спишь?</h1>

Атрибуты уточняют поведение тега. Их пишут в треугольных скобках после тега, дальше ставят знак равенства и значение атрибута в кавычках:

<a href="https://praktikum.yandex.ru">Ссылка на сайт Практикума</a>

Например, атрибут href указывает адрес ссылки.

Для некоторых тегов атрибуты обязательны. Чтобы разместить изображение, в теге img нужно прописать атрибуты src и alt. src указывает путь до файла с картинкой, alt — текст, который появится, если не удалось загрузить изображение.

<img src="https://mydomain.com/image.jpg" alt="пример изображения">

А еще напоминаем про обязательный набор тегов (они должны быть на любой странице):

<!DOCTYPE HTML>
<html>
  <head>
  </head>
  <body>
  </body>
</html>

Внутри тегов head описывают правила, по которым браузер читает страницу. Внутри body — то, что видит пользователь.

=====Класс

class — атрибут, который помогает различать элементы. Его можно присвоить нескольким элементам и обращаться к ним по имени класса. Это удобно при работе со стилями и скриптами.

<p class="my-paragraph">Параграф с классом my-paragraph</p>

Одному элементу можно присвоить несколько классов. Один класс может задавать параметры всех кнопок, а другой покрасить каждую в свой цвет — в зависимости от контекста использования.

HTML

<!-- Кнопка отправки формы: -->
<button class="project-button project-button_type_submit">Отправить</button>

CSS

/* Все кнопки будут 100 на 30 пикселей, со скруглёнными углами и надписью заглавными буквами */
.project-button {
  width: 100px;
  height: 30px;
  border-radius: 4px;
  text-transform: uppercase;
}
/* Кнопка отправки формы будет синего цвета стали с белой надписью */
.project-button_type_submit {
  background-color: steelblue;
  color: white;
}

Принято стилизовать элементы по имени класса, а не тега. Так с ними удобнее работать в CSS.

=====Стили

CSS — это язык веб-страницы, который отвечает за стили: цвета, шрифты, отступы и другие штуки, которые делают сайт красивее и упорядоченнее. Стили пишут в файле с расширением .css, а затем подключают внутри элемента head:

Правила CSS состоят из селекторов, свойств и значений:

.my-class {
  color: red;
}

.my-class — это селектор, он выбирает элемент с классом my-class;
color — свойство, задающее цвет текста;
red — значение, определяющее красный цвет.

=====Селекторы

Чтобы стилизовать элементы, их нужно выбрать. Для этого существуют селекторы. С их помощью можно сразу выбрать целую группу элементов (параграфы, ссылки, классы) и задать всей этой группе определённые параметры: размер, шрифт, цвет и что только не.

Самые распространённые селекторы:

По имени тега:

/* выбираем все элементы с тегом p на странице */

p {
  color: red;
}

По имени класса:

/* выбираем все элементы с классом my-class */

.my-class {
  color: red;
}

Селекторы вложенности. Их используют, когда нужно выбрать все дочерние элементы по отношению к родительскому элементу:

/* все p внутри div */
div p {
  color: red;
}

/* все элементы с классом my-class внутри div */
div .my-class {
  color: red;
}

Комбинированные селекторы. Их используют, когда нужно выбрать специфичный элемент, например, одновременно с двумя классами или ссылку с определенным параметром:

/* ссылка с классом my-link */

a.my-link {
  color: red;
}

/* элемент с классами my-button и my-button_large одновременно */

.my-button.my-button_large {
  color: red;
}

Для повседневной работы этого хватит. Если хотите разобраться во всех тонкостях выбора элементов, рекомендуем игру для изучения селекторов: https://flukeout.github.io/ (на английском).

===== Элементы в потоке

Все HTML-элементы следуют друг за другом: либо находятся на одной строке с соседом, либо начинают новую строку. Это зависит от типа элемента — условно одного из двух:

Строчные элементы. Занимают ровно столько места, сколько нужно для их контента, располагаются на одной строке с другими строчными элементами и не реагируют на изменение ширины и высоты.

Так ссылка внутри параграфа находится на одной строке с текстом этого параграфа:

<p>В этом абзаце есть <a href="http://ya.ru">ссылка</a></p>

Блочные элементы. По умолчанию занимают всю ширину своего родителя и располагаются на новой строке.
Например, абзацы, контейнеры div и заголовки.

<!-- Все эти элементы займут ширину родителя целиком и будут начинаться с новой строки -->

<h1>Самый главный заголовок</h1>
<p>Это абзац текста.</p>
<div></div>

Свойство display определяет поведение элементов. Строчные могут стать блочными и наоборот:

a {
  display: block; /* теперь ссылка занимает всю ширину родителя и расположена на новой строке */
}

p {
  display: inline; /* абзац займёт ровно те размеры, которые нужны для контента внутри, и окажется на одной строке с другими строчными элементами */
}

Когда блочный элемент становится строчным, ему нельзя задать ширину и высоту. Чтобы он вёл себя как строчный, но не игнорировал свойства width и height, придумали комбинированный тип — блочно-строчный:

p {
  display: inline-block; /* абзац окажется на одной строке со строчными и блочно-строчными элементами, но ему можно задать ширину и высоту */
}

Блочно-строчные элементы выравниваются по последней строке текста внутри них:

Поэтому вертикальным выравниванием нужно управлять, например, задавать выравнивание по верхней строчке:

Если два блочно-строчных элемента описаны в коде друг под другом, в документе их будет разделять пробел.

<p>Первый абзац</p>
<p>Второй абзац</p>

Для этих двух абзацев можно написать такой CSS:

p {
  display: inline-block;
  vertical-align: top;
}

Абзацы встанут в одну строку, но между ними появится пробел.

=====Блочная модель документа

Блок в HTML состоит из нескольких частей: размеров, границы, внешних и внутренних отступов. Это сочетание называют блочной моделью документа. Чаще всего её описывают изображением:

Размеры блока задают шириной и высотой. Можно использовать абсолютные (пиксели) и относительные (сотые доли) величины:

% — от размеров родительского блока,
vh — от высоты окна браузера,
vw — от ширины окна браузера.
div {
  width: 300px;
  height: 200px;
}

Граница — группа свойств со множеством параметров. Основные:

border-width— толщина границы,
border-style— стиль границы,
border-color — её цвет.

Для краткости эти свойства пишут в одну строку — друг за другом, через пробел.

div {
  border: 1px solid red; /* сплошная граница в 1 пиксель красного цвета */
}

Внешние отступы margin, или поля — пространство между элементом и его соседями:

div {
  margin-top: 20px; /* расстояние до верхнего соседа */
  margin-right: 20px; /* расстояние до правого соседа */
  margin-bottom: 20px; /* расстояние до соседа снизу */
  margin-left: 20px; /* расстояние до соседа слева */
}

/* Сокращённая запись того же самого */

div {
  margin: 20px;
}

Если блочному элементу установить margin-left и margin-right в значении auto, блок центрируется по горизонтали. Для вертикального выравнивания это не сработает.

div {
  margin-left: auto;
  margin-right: auto;
}

/* Сокращённая запись */

div {
  margin: 0 auto;
}

Внутренний отступ padding отодвигает контент внутри блока от границы. У padding нет специального значения auto.

div {
    padding-top: 20px; /* расстояние от верхней границы до содержимого */
    padding-right: 20px; /* расстояние от правой границы до содержимого */
    padding-bottom: 20px; /* расстояние от нижней границы до содержимого */
    padding-left: 20px; /* расстояние от левой границы до содержимого */
}

/* Сокращённая запись */

div {
    padding: 20px;
}

Когда мы описываем границу или внутренний отступ, размер блока увеличивается. Добавляется толщина границы, а внутренние отступы «раздувают» блок, чтобы создать пространство вокруг контента.

Такое поведение меняют свойством box-sizing (со значением content-box по умолчанию). Если изменить значение на border-box, границы будут отрисованы внутри блока, а внутренние отступы не повлияют на его размеры:

div {
    box-sizing: border-box; /* задали box-sizing */
    width: 300px; /* ширина блока */ 
    height: 200px; /* высота блока */
    border: 2px solid red; /* граница не влияет на размер */
    padding: 20px; /* отступ не растягивает блок */
}

=====Свойства текста и шрифта

А теперь давайте повторим базовые CSS-свойства (собрали только самые основные, вообще их гораздо больше). Их важно знать, поскольку они станут основой для более сложных концепций.

Текст

color — цвет текста. Можно задать ключевыми словами, HEX-кодом, в RGB- или RGBA-палитре.
text-align — выравнивание текста внутри блока: по левому краю left, по правому right, по центру center.
text-decoration — оформление текста. Часто используют подчеркнутый текст underline и неоформленный none.
text-transform — перевод текста в верхний uppercase или нижний lowercase регистр.

Шрифт

font-family — семейство шрифтов. Работает только со шрифтами, которые есть на устройстве пользователя. Можно перечислять шрифты через запятую, чтобы браузер искал среди них установленный.
font-size — размер шрифта.
font-weight — начертание: полужирное bold, обычное normal и тонкое lighter.

=====Свойства фона

Эти свойства фона вам обязательно пригодятся, поэтому напомним, что там к чему:

background-color — цвет фона. Можно задать словами, HEX-кодом, в RGB- или RGBA-палитре.
background-image — фоновое изображение. Ссылка на ресурс задаётся внутри параметра url():

div {
  background-image: url(путь_к_изображению);
}

background-size — размер фона. Часто используют значения:
contain — фоновое изображение целиком вписывается в блок;
cover — фон накрывает блок.

Свойство contain умещает изображение целиком, но оставляет поле. А свойство cover — наоборот, не оставляет полей, но обрезает изображение.

background-position — расположение фона по вертикали и горизонтали. Можно задать его позицию словами:
left, center и right для горизонтального выравнивания;
top, center и bottom для вертикального.

div {
  background-position: center top; /* изображение центрировано по горизонтали, 
верхний край фона прижат к верхней границе */
}