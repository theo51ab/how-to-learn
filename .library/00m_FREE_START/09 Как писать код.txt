Как писать код?
Во время проектной работы (и, надеемся, на реальной работе в дальнейшем) вы будете писать код в текстовом редакторе. Чем лучше оформлен код, тем проще его проверять. Вообще, оформление — как посещение мишленовского ресторана: ты либо точно знаешь, какой из 12 вилок есть устрицы, либо ловишь на себе недоуменные взгляды официантов.
Мы подготовили набор правил по оформлению HTML и CSS. Сохраните эту ссылку и не пугайтесь, если не сразу всё поймёте. Некоторые правила пригодятся вам по мере углубления в тему.
https://code.s3.yandex.net/web-developer/static/design-rules/index.html

Комментарии в коде
Большую часть времени разработчик либо пишет код в команде, либо поддерживает сайт, написанный кем-то другим.
Комментарии в коде нужны, чтобы:
Оставить пояснение себе или разработчикам, которые будут иметь дело с кодом.
В этом случае комментарии должны дополнять код, а не объяснять очевидное. Не стоит под новой переменной писать что-то вроде «объявляем новую переменную». А вот описать, что именно делает функция, — хорошая практика.
Скрыть нерабочую часть кода. Это поможет, когда на сайт добавили новую анимацию, форму заявки или что-то ещё, но код не дописан или содержит ошибку. Пока вы всё доводите до ума, старый код работает, а его недоделанные части не мешают пользоваться страницей.
Разработчики называют это «закомментировать» и «раскомментировать»: превратить код в комментарий или, наоборот, комментарий — в код.

Как писать комментарии
Комментарии заключают в специальные конструкции, поэтому браузер их не видит.
В HTML комментарии заключают между <!-- и -->:
<!-- Блок со слайдером --> 
В CSS и JavaScript — между /* и */:
/* Общие стили для body */ 
Комментарий может располагаться на одной строке или на нескольких:
<!-- Когда получим картинки от заказчика,
здесь нужно заменить заглушки в img --> 
/* Временные стили для этого блока,
шрифты будут другие,
напомнить дизайнеру подобрать подходящие */ 
В JavaScript есть ещё и однострочные комментарии. Они начинаются с двух слешей, а заканчиваются вместе со строкой.
// Объявляем функцию-обработчик события под кодом, меняющим цвет. 
Комментарии — полезная вещь, но не стоит ими злоупотреблять, иначе код станет трудным для восприятия. Со временем вы научитесь оставлять ровно столько комментариев, сколько необходимо, и именно там, где это нужно.

О браузерных стилях
Когда вы пишете код страницы, браузер сам назначает элементам стили. Например, делает заголовок первого уровня больше последующих и оставляет отступы вокруг контента. Но как убедиться, что во всех браузерах всё одинаково? Никак — если дополнительно кое-что не поменять.
Вариант 1
Вручную переписать все основные стили. Это самый безошибочный, хоть и трудоёмкий подход: в Яндексе делают именно так. Такой способ — часть методологии БЭМ, которую мы начнём изучать уже в этом спринте.
Вариант 2
Сбросить всё до отправной точки — сделать элементы такими, будто браузер не задавал им собственные параметры. Свои стили придётся писать с нуля.
Этот подход предложил Эрик Мейер — создатель файла reset.css. Когда мы подключаем этот файл, большинство текстовых элементов страницы становятся одинаковыми, а затем мы сами определяем их стили.
Способ удобный, но его часто критикуют: reset.css очень жёстко обходится с элементами, нивелируя их особенности. Это может вызвать неожиданное поведение.
Всегда подключайте reset.css в коде выше собственных стилей, иначе стили из reset.css окажутся приоритетнее и заменят ваши:
<head>
    <!-- метатеги и title -->
    <link rel="stylesheet" href="reset.css"> <!-- Сначала reset.css -->
    <link rel="stylesheet" href="style.css"> <!-- Потом свои стили -->
</head> 
Reset.css можно скопировать на компьютер или подключить из интернета: https://meyerweb.com/eric/tools/css/reset/
Вариант 3
Нормализовать стили — убрать различия отображения в разных браузерах. Для этого Николас Галлахер создал файл normalize.css, который описывает одинаковое поведение для всех браузеров, а не убирает отличия между элементами. Этот подход мы и будем использовать в учёбе.
Подключайте normalize.css выше своих стилей, но будьте внимательны. У некоторых элементов — таких как заголовки, параграфы или пункты списка — сохранятся стили, которые вы не писали. Их придётся вручную переписывать в CSS.
Файл normalize.css удобен тем, что его можно не использовать целиком, — он разделён на блоки. Стили текста собраны в одну группу, стили форм — в другую. Можно удалить стили для элементов, которых нет и не будет в проекте, и сайт будет загружаться быстрее.
Всегда подключайте normalize.css в коде выше собственных стилей, иначе будет как с reset.css: они «перекроют» ваши.
<head>
  <!-- метатеги и title -->
  <link rel="stylesheet" href="normalize.css"> <!-- Сначала normalize.css -->
  <link rel="stylesheet" href="style.css"><!-- Потом свои стили -->
</head> 
Normalize.css можно сохранить на компьютере или подключить в интернете: https://necolas.github.io/normalize.css/

