===== Что вы можете сделать сейчас?

Сейчас вы вледеете такими инструментами:
- Базовые свойства CSS
- HTML
- Методология БЭМ
- Псевдоклассы и псевдоэлементы
- Позиционирование

Это далеко не вся информация про верстку, но её достаточно, чтобы верстать простые макеты. Теперь мы советуем начать работать над брифом №1 целиком, верстая секции шаг за шагом. У вас всё получится, мы уверены!

Спланируйте время так, чтобы осталось на второй бриф и шлифовку. Работайте над брифом параллельно с изучением нового материала. Знания усваиваются лучше, если повторять на практике уже пройденное и при этом не останавливаться в учёбе. Чтобы чувствовать себя в вёрстке, как рыба в воде, нужно на какое-то время создать вокруг себя непрерывный поток кода и понемногу писать каждый день.

Чтобы спланировать работу, нужно декомпозировать проект — то есть разделить его на части. Бриф — уже декомпозированный проект: в нём описаны все составные элементы макета. Но в будущем вам предстоит делать это самостоятельно.

Следующий урок — как раз об этом.

===== Декомпозиция проекта по вёрстке

Почему это важно

Декомпозиция проекта на небольшие задачи — это способ «съесть большого слона маленькими кусочками», психологически приготовиться к решению сложного и непонятного задания, начать с малого.

Уделяйте этому процессу максимум внимания в начале работы над проектом. Постепенно, когда освоите этот навык, вы поймёте, как оптимизировать процесс планирования и решать задачу эффективно. Мы покажем вам общий подход, который поможет во время обучения в Практикуме и в первое время на новой работе.

Как декомпозировать проект

Планы часто срываются, но планировать всё равно нужно. Главная задача планирования в том, чтобы научиться прогнозировать свою работу. Когда реальность не совпадает с нашими планами, мы делаем вывод, что оценили сложность задач неправильно. Мы сравниваем то, что запланировали, с тем, что вышло, и учитываем это в следующем плане. Если план не составлять, то и сравнивать будет нечего.

На какие порции разбивать проект

Разбейте проект на крупные задачи, размером в один день или вечер обучения. Их поделите на подзадачи примерно по 25 минут каждая, согласно методу «Помидора» ( https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D1%82%D0%BE%D0%B4_%D0%BF%D0%BE%D0%BC%D0%B8%D0%B4%D0%BE%D1%80%D0%B0 ). Этого времени достаточно, чтобы погрузиться в проблему и начать её решать.

Бывает, что за несколько «помидоров» так и не удаётся сдвинуться с мёртвой точки. Это нормально и даже полезно. Помните, что мы не обучаемся, когда выполняем задачу, решение которой нам известно. Мы обучаемся, когда мы не знаем решения и ищем его.

Как декомпозировать вёрстку

Разбейте макет на секции

Секция — это один смысловой блок сайта. Например, «хэдер», «футер», галерея или форма обратной связи. Выделите на неё рабочий день или пару вечеров. Поначалу может получаться дольше, это нормально.

Выделите основные блоки внутри секций

Определите ключевые элементы внутри каждой секции: блоки с текстом, изображения, видео и таблицы. Такие элементы будут вашими подзадачами.

Весь проект → Секции → Элементы.

На один элемент закладывайте примерно 2—3 «помидора». Скорее всего, вы столкнётесь с такими задачами, на которых застрянете на вечер и больше. Не спешите, следуйте методологии ”Read, Search, Ask“ ( https://praktikum.yandex.ru/trainer/web-plus/lesson/e846402b-432e-47fb-b70b-08044ce9b8a5 ). Ваша задача — не сдать побыстрее проект, а научиться думать как программист.

===== Дебаггинг в вёрстке

Разработчик почти всё время сидит перед неработающим сайтом. Когда разработчик не пишет новый код, он работает с багами в существующем. И половина успеха — это найти баг.

Панель разработчика всегда открыта

Главный инструмент — панель разработчика или «девтулз». Во время разработки всегда должна быть открытой. Как капот при ремонте двигателя машины — неудобно постоянно подходить, открывать и закрывать его.

Панель разработчика позволяет быстро работать с «деревом» и стилями: выбирать элемент; снимать, редактировать и добавлять стили. Вы сразу видите, как это влияет на внешний вид элементов, и можете подобрать правильные значения для их свойств.

Частые проблемы

Не работают стили, шрифты или картинка

Как только вы прикрепили к HTML-файлу страницу стилей или шрифты, проверьте на каком-нибудь тестовом свойстве, что файл подключён и работает. Это избавит вас от долгих поисков проблемы в будущем. Например, создайте новый div, задайте ему ширину, высоту и примените свойство background-color. Теперь посмотрите в окно браузера и убедитесь, что стили сработали: блок приобрёл размеры и цвет.

Появляется горизонтальный скролл

Самый простой и действенный способ понять, из-за чего возникает горизонтальный скролл — посмотреть в девтулзах. Последовательно удаляйте крупные блоки из дерева HTML и смотрите, удаление какого блока уберёт скролл. Когда найдёте этот блок, попытайтесь определить, какой из элементов внутри него «виноват».

Проблема с позиционированием

Позиционирование — самая обширная и сложная тема в вёрстке. Постарайтесь разобраться во всех нюансах позиционирования как можно раньше. Это сэкономит для вас дни и недели времени в будущем. Когда вы будете смотреть на макет, вы сразу будете видеть, как его сверстать.

Допустим, вы нашли проблему с позиционированием. Например, картинка не встаёт в правый верхний угол. Самый действенный способ — открыть панель разработчика, выбрать нужный элемент, и перебором разных сочетаний свойства position у ребёнка и родителя найти подходящее решение. Желательно держать открытым какой-нибудь гайд по позиционированию, например, от CSS-Tricks ( https://css-tricks.com/almanac/properties/p/position/ ).

Профилактика

Проверять в валидаторе

Хорошая практика, особенно поначалу, регулярно проверять свой код в валидаторе. Это не избавит от всех ошибок — код может быть валиден, но не работать. Но это научит следить за наиболее критическими ошибками.

Соблюдать отступы

Соблюдение разметки внутри кода помогает быстро в нём ориентироваться. Аккуратные отступы — простой и работающий способ разобраться в структуре кода. Это важно и для других людей, работающих с вашим кодом.

Когда вы возвращаетесь к коду спустя несколько дней или месяцев, соблюдённая разметка поможет читать код.