===== Введение

В этой короткой теме вы познакомитесь с четырьмя очень практичными инструментами:
- Идентификаторами
- Псевдоклассами
- Псевдоэлементами
- Селекторами атрибутов

Это утилитарные вещи, которые пригодятся в повседневной верстке. Идентификаторы нужны для создания «якорных ссылок». Псевдоклассы позволят стилизовать элементы при наведении мыши. Псевдоэлементы позволят добавить привязанный к элементу дополнительный декоративный элемент. Селекторы атрибутов — редко используемая, но полезная техника.

Пока мы только перечислили примеры использования этих инструментов, но с их помощью можно решать разные задачи. Начнём.

===== Идентификаторы

Статьи на Википедии начинаются с содержания. Содержание состоит из ссылок, которые не ведут на другую страницу. Вместо этого по ссылке пользователь переходит на другую часть той страницы, на которой находится.

Такие гиперссылки называют якорными. Они ссылаются на конкретный объект на странице. Причём этот объект может находиться как на текущей странице, так и на любой другой.

Для установки якорной ссылки необходимо указать HTML-элемент, на который она ведёт. Например, на определённый заголовок в статье.

Как указать этот элемент? Использовать имя тега или имя класса не выйдет: эти имена могут повторяться. Нам же нужна уникальная метка элемента: идентификатор.

Идентификатор элемента задаётся атрибутом id — от англ. identifier, идентификатор. Идентификатор элементу присваивает разработчик. Идентификатор должен быть уникален в пределах одной страницы.
Например, идентификатор part-11 в коде выглядит так:
<h2 id="part-11">Часть 11: идентификаторы</h2>

Когда мы установили id для элемента, можем ссылаться на него. Например, в адресе ссылки, установив якорную ссылку на той же веб-странице или на какой-то другой.

Если якорная ссылка и элемент, на который она ссылается, находятся на одной странице, то в качестве адреса ссылки нужно прописать хеш — символ «решётка», #, — а затем имя идентификатора без пробела:
<a href="#part-11">Якорная ссылка с той же страницы</a>

А чтобы сослаться на этот элемент с любой другой страницы, нужно указать полный адрес страницы, на которой находится объект, а после — хеш и идентификатор элемента:
<a href="https://my-site.com/article#part-11">Якорная ссылка с другой страницы</a>

При переходе на страницу с официальным описанием якорных ссылок на W3Org, страница автоматически прокручивается вниз. Это якорная ссылка ведёт на элемент с id="h-12.2.3", который расположен примерно в середине страницы. Адрес ссылки выглядит так: https://www.w3.org/TR/html401/struct/links.html#h-12.2.3 .

Хотя идентификаторы не следует использовать в селекторах правил CSS, технически это возможно. В CSS-селекторе перед названием идентификатора ставится хеш:
#part-11 {
    color: #ff0000;
}

Придумывая идентификатор, соблюдайте три правила, чтобы код был читаемым и для людей, и для роботов:
- не начинайте id с цифр или спецсимволов;
- если в названии несколько слов, разделяйте их дефисами или нижними подчёркиваниями вместо пробелов;
- подбирайте простые слова из английского языка.

Соблюдайте эти правила, и ваш код будет понятен любому.

===== Псевдоклассы

До сих пор мы определяли внешний вид элементов при загрузке страницы: давали блоку имя, затем описывали стили для этого блока. Но часто элементы нужно стилизовать в зависимости от контекста.

Например, покрасить ссылку в другой цвет при наведении мыши. Чтобы решить эту задачу, нужно чтобы кто-то делал умозаключения: «указатель мыши находится на этой ссылке, значит, следует поменять её цвет». Или: «указатель не на этой ссылке, значит, её цвет менять не нужно». Кто-то должен анализировать ситуацию и принимать решения.

К счастью, браузер способен к анализу, пусть и очень несложному. Браузер умеет находить CSS-селекторы и добавлять в них сведения, которые вы в документе не прописывали. Такие сведения называются псевдоклассы, то есть «классы, которых как бы нет».

Браузер определяет их, исходя из своих знаний:
- об HTML-разметке: типе элементов, порядке их расположения, вложенности, языке;
- о действиях пользователя: кликах по ссылкам, заполнении форм, перемещении элемента мышкой.

--- Стилизация на основе действий пользователя

Можно стилизовать элементы, реагируя на действия пользователя. Обычно нужно определить специфический внешний вид элемента:
- если пользователь ещё не посещал ссылку — псевдокласс link;
- уже посещал ссылку — visited;
- навёл на элемент указатель мыши — hover;
- нажал на элемент — active.

CSS-селекторы псевдоклассов записывают через двоеточие:
/* все ссылки, которые пользователь не трогал, будут синие */
a:link {
    color: #00f;
}
/* ссылки, по которым пользователь переходил, сделаем серыми, бледными */
a:visited {
    color: #808080;
}
/* ссылка, на которую пользователь навёл курсор, сменит цвет на зеленый */
a:hover {
    color: #0f0;
}
/* в момент клика ссылка станет красной */
a:active {
    color: #f00;
}

Есть мнемоническое правило, которое поможет запомнить эти четыре псевдокласса. Оно составлено из двух английских слов: love и hate: LoVeHAte.
L — :link — ссылка, по которой пользователь не переходил;
V — :visited — ссылка, по которой пользователь уже переходил;
H — :hover — элемент, на который навели указатель мыши;
A — :active — элемент, по которому кликают (вид элемента в момент нажатия).

--- Стилизация, исходя из знаний о разметке

Браузер умеет анализировать разметку. Например, понимает, сколько вложенных элементов у блока, и может посчитать, сколько однотипных блоков на странице.

Вот как это применяют. На сайте интернет-магазина часто располагают товары «плиткой». Каждой карточке товара мы задаём внешний отступ справа, чтобы между карточками был промежуток. Но у последней карточки в каждом ряду не должно быть отступа — иначе 3 карточки не влезут в контейнер и начнут переноситься на следующую строку.

Чтобы карточки уместились в ряд, нужно обнулить правый отступ у каждой третьей карточки. Для этой задачи есть псевдокласс nth-of-type, то есть «n-й элемент этого типа». Он назначает стили каждому n-му элементу: например, второму, третьему, десятому или пятидесятому.

В скобках после имени псевдокласса указывают число и букву n. 2n означает, что свойство нужно применить к каждому второму элементу, подходящему под селектор. 3n — каждому третьему, 4n — каждому четвёртому. И так далее по аналогии.
/* правый отступ будет сброшен у каждого третьего элемента с классом card */
.card:nth-of-type(3n) {
    margin-right: 0;
}

Чтобы стилизовать самый первый элемент, подходящий под селектор, есть псевдокласс first-of-type, что переводится «первый такого типа». Аналогично есть псевдокласс last-of-type (последний такого типа) для самого последнего элемента.

--- Функциональные псевдоклассы

Эти псевдоклассы позволяют стилизовать элементы, анализируя разметку или историю действий пользователя. Например, псевдокласс has позволяет стилизовать только элементы, которые содержат внутри себя заданные теги. Имена тегов прописывают в скобках после псевдокласса:
/* стили применятся только к секциям, внутри которых есть заголовок второго уровня */
section:has(h2) {
    /* стили */
}

Другой полезный функциональный псевдокласс — not. То, что он принимает в скобках, должно не выполняться:
/* выберет все ссылки, по которым пользователь ещё не переходил */
a:not(:visited) {
    /* стили */
}

В официальной документации https://www.w3.org/TR/selectors-4/#pseudo-class вы можете узнать подробности обо всех псевдоклассах. Мы разберём лишь основные принципы их применения.

===== Псевдоэлементы и селекторы атрибутов

Браузер может не только анализировать ваш контент, но и добавлять что-то от себя до или после элемента.

Этому служат псевдоэлементы before (англ. «до») и after (англ. «после»). Их принято писать через два двоеточия в конце селектора:
.selector::before {
    /* стили для псевдоэлемента before */
}
.selector::after {
    /* стили для псевдоэлемента after */
}

Браузер вставляет псевдоэлемент ::before перед содержимым указанного элемента, а ::after — после.
Псевдоэлементы ::before и ::after всегда содержат свойство content. Оно определяет, каким содержимым будут наполнены псевдоэлементы.

На примере это колдовство станет понятнее.
HTML-код:
<h1 class="title">недаром</h1> 
CSS-код:
.title::before {
    content: 'Зима ';
}

.title::after {
    content: ' злится';
}
Этот код выведет на страницу заголовок «Зима недаром злится». При этом слова «Зима» и «злится» будут не частью элемента h1, а вложенными в h1 особыми псевдоэлементами, то есть «элементами, которых как бы нет».

Отображением псевдоэлементов управляют посредством CSS точно так же, как и отображением обычных элементов: задают им фон, шрифт, размер и прочие стили.

--- Селекторы по атрибутам

Ещё один интересный и полезный способ работы с CSS — использование селекторов, привязанных к атрибутам. Такие селекторы выбирают элементы, имеющие определённые значения атрибутов. Для этого в квадратных скобках нужно написать имя атрибута, знак равенства и нужное значение в кавычках.
img[src='logo.png'] {
    border: 1px solid #0000ff;
}

Селектор img[src='logo.png'] выберет только изображение с источником по адресу logo.png и только его обведет голубым контуром. А все прочие картинки оставит без внимания.

Подобные селекторы применяются для решения специфических задач. А такие задачи перед вами обязательно встанут, тогда-то это знание вам и пригодится.

===== Заключение
Вы отлично потрудились, чтобы сделать портфолио таким, какое оно есть. Но всегда имейте в виду будущий «рефакторинг» — улучшение кода. Веб-разработчики постоянно что-то доделывают и переделывают.

Мы отдаём вам финальный код проекта, чтобы вы могли улучшать его по мере изучения новых тем:
https://code.s3.yandex.net/web-developer/final-projects/theme-08/portfolio.zip

Что ещё можно предпринять:
- почистить ненужный код и текст, который остался в процессе обучения;
- добавить блок с информацией о себе, чтобы работодатель мог узнать о ваших умениях;
- сделать файловую структуру по БЭМ, чтобы можно было использовать блоки в других проектах;
- изучить адаптивную вёрстку и доработать сайт под смартфон и планшет;
- изучить технологию Grid Layout и упростить построение сетки;
- добавить анимацию;
- добавить эффекты при наведении мышки на видео.

О последнем пункте расскажем в следующей теме о позиционировании элементов. Если просто задать :hover тегу, видео не сработает. Но выход есть: нужно создать новый элемент, сделать его прозрачным, разместить поверх видео, и показывать при наведении мышки. Скоро вы изучите технологии, которые помогут это сделать.

===== Что можно сделать в проекте

Создайте элемент header__link и примените к нему ховер-эффект, описанный в брифе. Создайте ссылку с этим классом в HTML-файле и убедитесь, что всё работает.