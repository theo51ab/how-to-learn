===== Файл
У вас в тренажёре вкладки с кодом на разных языках: HTML, CSS и JS. Это достаточно удобно — всего несколько вкладок, между которыми вы переключаетесь. Не нужно тратить время на поиск вкладки, вы сосредоточены на написании кода. В настоящих проектах разработчик сам должен решить, где расположить style.css, а где — index.html. Разобраться поможет организация файлов при вёрстке.

Расширение помогает системе определить, как исполнить файл. Разметка нашего проекта хранится в HTML-файлах, код стилей в CSS-файлах, а скрипты — в JS-файлах. HTML-файлы система откроет в браузере, CSS и JS — в текстовом редакторе. Атрибуты — набор свойств файла. Атрибуты — набор свойств файла. Список атрибутов доступен в специальной вкладке операционной системы.

Атрибутов бывает много. Например, атрибут readonly запрещает пользователю запись и редактирование файла. Это может стать проблемой. Файлы с атрибутом readonly без дополнительных действий не получится отредактировать на удалённом сервере. А файлы с атрибутом hidden вообще будут скрыты от пользователя.

Файлы можно разделить на две категории:
- Файлы данных — интересуют веб-разработчика в первую очередь. Графические и текстовые файлы, файлы баз данных и сценариев (скриптов).
- Программные файлы. Имеют расширение текущей OC. Выполняют системные функции. Например, файлы с расширением .lnk — ярлыки или ссылки в Windows.

Каталог или директория — место для хранения других директорий и файлов. Наши проекты хранятся в директориях, которые мы для них создаём.

===== Линейная структура и иерархия. Разделение файлов по типам

Файловая структура — это способ организации файлов по каталогам.

Простая файловая структура — линейная, без вложенных директорий внутри родительского каталога. У простой файловой структуры есть свои недостатки. Проект с большим количеством HTML-, CSS-, JS-файлов и изображений превращается в хаос. Найти нужный файл становится очень сложно. А скорость — ключевой показатель эффективности разработчика.

Удобнее разделять файлы по папкам, отводя для изображений, шрифтов, файлов стилей и скриптов свои каталоги. Это облегчает поиск. Файловая структура со вложенными директориями называется иерархической.
Иерархическая файловая структура — это файловая структура, которая содержит вложенные друг в друга каталоги и подкаталоги с файлами.

Вот файловая структура, которую часто организуют веб-разработчики:
1. HTML-файлы хранятся в корневом каталоге.
2. В этот же «корень» вложены подкаталоги —
3. /images, изображения — иконки, фоновые и контентные изображения различных расширений;
4. /styles, файлы стилей;
5. /scripts, JS-файлы;
6. /fonts, шрифты.
Это самая примитивная файловая структура, которую в основном используют для небольших проектов. Со временем вы будете строить более сложную БЭМ-структуру файлов. А пока остановимся и разберёмся, как связывать файлы друг с другом.

Из задачи по теме:

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Главная страница</title>
  <!--<link rel="stylesheet" href="styles/normalize.css">-->
  <!--<link rel="stylesheet" href="styles/style.css">-->
</head>
<body>
<header class="header">
  <img src="images/logo_color.svg" alt="логотип Яндекс.Практикум" class="logo">
  <nav class="menu">
    <a href="index.html" class="menu__link">Главная</a>
    <a href="about.html" class="menu__link">О проекте</a>
    <a href="contacts.html" class="menu__link">Контакты</a>
  </nav>
</header>
<main class="content">
  <h1 class="main-title">Каждый может
    стать программистом</h1>
  <p class="main-subtitle">Мы делаем цифровые профессии доступными
    и помогаем освоить новое дело с нуля.</p>
  <h2 class="content__title">Не бойтесь</h2>
  <p class="content__paragraph">Достаточно начать — и, конечно, не бросить.
    Мы поможем приступить к учёбе и справиться
    с трудностями.</p>
  <h2 class="content__title">Создавайте новое</h2>
  <p class="content__paragraph">Специалисты цифровых профессий создают новые
    продукты для людей. Это не только технические,
    но и творческие задачи.</p>
  <h2 class="content__title">Действуйте</h2>
  <p class="content__paragraph">Вы войдёте в профессию небольшими,
    но уверенными шагами. Будет трудно,
    но у вас получится.</p>
</main>
<footer class="footer">
  <p class="footer__copyright">© Яндекс.Практикум</p>
</footer>
</body>
</html>

===== Абсолютные и относительные пути к файлам
При вёрстке часто приходится связывать файлы друг с другом. Например, в файле стилей указать ссылку на изображение для свойства background-image. Изображение может лежать в другой папке или в интернете.

Все файлы вашего компьютера лежат на жестком диске в иерархической структуре. Абсолютный путь на компьютере — это перечисление всех шагов от самого глубокого домашнего каталога до нужного файла, как C:/Projects/html_project/images/logo.png. Такая ссылка будет работать в любом месте жёсткого диска. Но если мы переместим файл в другой каталог, по старому пути он станет недоступен.

Абсолютный путь файла в интернете — ссылка на ресурс, к которому обращён запрос. Начинается с указания протокола http:// или https://. Домены, как и люди, переезжают. Сменив адрес в интернете, файл перестанет быть доступным по старому пути. Попытка скачать что-нибудь из интернета на страницу, размещённую на компьютере, занимает время. Скорость выполнения запроса зависит от качества интернет-соединения и работоспособности сайта, с которого вы собираетесь скачать файлы. Если вы храните файлы сайта в интернете и используете абсолютные ссылки — знайте, что это влияет на производительность вашего сайта.

===== Абсолютный путь и тег link
Вы использовали элемент <link> для подключения стилей, но делали это в простой файловой структуре, когда style.css находился на одном уровне с index.html. Вот как это выглядело:

<head>
    <link rel="stylesheet" href="style.css">
</head>

<link> позволяет обращаться к файлам в интернете, указывая ссылку на них в уже знакомом атрибуте href. Нередко это библиотека — написанный другим разработчиком код, который позволит вам не решать уже решённые кем-то проблемы. Библиотеки удобно использовать для вспомогательных задач, на решение которых уйдёт больше времени, чем на написание основного кода проекта. Ресурсы с кодом библиотек называют CDN — Content Delivery Network (англ. сеть доставки контента). К файлам на CDN также делают запрос через link.

Известный CDN для поиска фронтенд-библиотек: https://cdnjs.com/
Есть ряд минусов:
- Вы не можете редактировать получаемые с CDN файлы;
- Сторонние библиотеки поддерживают их владельцы. Они добавляют в них возможности и меняют код. Вы не можете на это влиять.
- Выполняется запрос к стороннему файлу. Сервер может сломаться и перестать отвечать на запросы. Если ваш сайт зависит от файла на этом сервере, он тоже сломается.
Чтобы эти проблемы нас не касались, мы будем скачивать чужие библиотеки разными инструментами. Но об этом позже.

//Оригинальный код для инсталляции с шарами: https://codepen.io/uuuulala/pen/vYBQmoK

===== Относительные пути к файлам
В прошлом уроке вы подключали файлы, указывая абсолютные пути. При таком подходе возникает ряд проблем. Когда вы размещаете вёрстку на удалённом сервере, все абсолютные пути до вашего компьютера перестают работать. Веб-сервер имеет собственный диск, где структура файлов отличается от вашей. Чтобы избежать такой проблемы, есть относительные пути.

Путь из квартиры на лестничную клетку можно представить символами ./. Указав такой путь в style.css, мы окажемся на этаже styles/ и сможем позвонить в другие квартиры — файлы стилей — если они есть:

<!-- выходим на лестничную клетку, поднимаемся на этаж styles и звоним в квартиру style.css -->
<link rel="stylesheet" href="./styles/style.css">

Попасть на лестницу можно командой ../. Эта комбинация символов ведёт на уровень выше — в каталог web-project/. Это и есть путь к соседям.

Выйдя на лестничную клетку, мы спустились на этаж images/ и постучались в квартиру body_bg.jpg.
./ — указание на каталог, в файле которого мы находимся;
../ — указание на каталог одним уровнем выше.

body {
  backgroung-image: url(../images/body_bg.jpg);
}

Другой вид относительных путей — от корневого каталога проекта. К нему нас возвращает указатель /. Это как путь от двери подъезда до любой квартиры.

body {
  backgroung-image: url(/images/body_bg.jpg);
}

Такая запись позволит, например, перенести проект на другой сервер без разрыва внутренних ссылок. Например, если в каталоге images/ появится ещё одна директория, в которую будет перемещён body_bg.jpg.

Учтите, что указатель / работает только на веб-сервере. Если вы напишете такой путь в файлах вёрстки на своём компьютере и откроете ссылку в браузере — окажетесь в самом корне операционной системы.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="./vendor/normalize.css">
  <link rel="stylesheet" href="./styles/style.css">
  <title></title>
</head>
<body>
<div class="page">
  <section class="grid">
    <div class="grid__item"></div>
    <div class="grid__item"></div>
    <div class="grid__item"></div>
    <div class="grid__item"></div>
    <div class="grid__item"></div>
  </section>
</div>
</body>
</html>

body,
html {
  width: 100%;
  height: 100%;
}
.page {
  height: 100%;
  width: 100%;
  background: #1F1F1F;
  display: flex;
  align-items: center;
  justify-content: center;
}
.grid {
  max-width: 920px;
  width: 100%;
  height: 100%;
  display: grid;
  background-color: #FFC0CB;
  -webkit-background-size: cover;
  background-size: cover;
  background-repeat: no-repeat;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
}
.grid__item {
  -webkit-background-size: cover;
  background-size: cover;
  border: 3px solid white;
}

===== CSS-директивы. @import
Элемент <link> не единственный способ подключения файла к проекту. В этом уроке мы разберём подключение файлов директивами.

Директивы — инструкции для CSS, которые меняют отображение или поведение элементов на странице. Ими можно подключать CSS-код и шрифты, создавать анимации. Обязательная часть директивы состоит из коммерческой at @ и названия директивы:
@имя_директивы правило;

Директив в CSS много, у каждой свой синтаксис. Сейчас разберём, как работает директива @import. А другие директивы нам ещё встретятся.

Директива @import позволяет включить внешние файлы, такие как шрифты или CSS, в текущую таблицу стилей.

Кроме того, @import даёт возможность скрепить несколько CSS-файлов в один, как в конструкторе LEGO. Или разделить один большой CSS-файл на несколько обособленных, которые легче поддерживать и повторно использовать. В большом проекте может быть десяток тысяч строк CSS-кода — без разделения CSS никак.

Синтаксис:
@import url('main.css');
@import url('../vendor/fixer.css');

Объявляя директиву, указывают путь до запрашиваемого файла внутри знакомой конструкции url(). Обратите внимание, что после директивы нет двоеточия, но точка с запятой в конце обязательна.

У @import есть ряд особенностей:
- CSS работает с @import так, что каждая обрабатываемая директива загружается по очереди. Это может плохо отразиться на скорости загрузки сайта. Элемент <link> позволяет загружать файлы параллельно.
- @import будет работать, только когда написана в начале файла. Внешние файлы загружаются первыми. Следующие за ними стили могут их перезаписать.

Идея импорта раскроет себя при изучении автоматических сборщиков, таких как Webpack. Вы сможете разделять код на небольшие блоки согласно его функциям и особенностям. Это позволит создавать заготовки для быстрой разработки проектов.

Пока что важно запомнить, что такое директива и как импортировать файл в свой CSS-код.

===== Заключение
Готово! Вы научились создавать распространённую файловую структуру для проекта. У вас получилось обратиться из одних файлов к другим внутри проекта, а также к файлам, расположенным в интернете, через относительные и абсолютные пути.

Умение выбирать между относительным и абсолютным путём, как и умение прописывать их — важный навык. Он много раз пригодится вам в обучении и дальнейшей работе.

Реальные проекты, как правило, содержат очень большое количество файлов. Вам придётся подключать одни файлы к другим, причём в нестандартной файловой структуре. Знания относительных путей очень пригодятся.
Чтобы подключать к проекту код сторонних разработчиков, нужны абсолютные пути. Этот процесс заметно облегчится, когда мы изучим специальный менеджер пакетов — npm. Он выведет взаимодействие с кодом сторонних разработчиков на новый уровень.

Также вы освоили файловую структуру по типам файлов. Она имеет ряд преимуществ:
- проста в создании;
- хорошо подходит для маленьких проектов из одной или нескольких страниц;
- её сможет быстро понять и начать редактировать даже новичок.

Чуть позже мы познакомимся с более сложной и объёмной файловой структурой, которая решает другие задачи. В конечном счёте вы научитесь выбирать файловую структуру, подходящую для решения конкретной задачи.